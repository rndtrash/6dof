//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
    CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
    Description = "Low quality shit";
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
    #include "common/features.hlsl"
}

MODES
{
    VrForward();

    ToolsVis( S_MODE_TOOLS_VIS );
    ToolsWireframe( "vr_tools_wireframe.vfx" );
}

//=========================================================================================================================
COMMON
{
    //#define S_TRANSLUCENT 1
	#define S_UNLIT 1
    #define STENCIL_ALREADY_SET
    #define DEPTH_STATE_ALREADY_SET
    #define BLEND_MODE_ALREADY_SET
    #define COLOR_WRITE_ALREADY_SET
    #include "common/shared.hlsl"
}

//=========================================================================================================================

struct VertexInput
{
    #include "common/vertexinput.hlsl"
};

//=========================================================================================================================

struct PixelInput
{
    #include "common/pixelinput.hlsl"
};

//=========================================================================================================================

VS
{
    #include "common/vertex.hlsl"
    //VS_CommonProcessing_Post
    // Main
    //
    PixelInput MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
    {
        PixelInput o = ProcessVertex( i );
		o.vPositionPs.xy = floor(o.vPositionPs.xy * g_vRenderTargetSize.xy) / g_vRenderTargetSize.xy;
        return FinalizeVertex( o );
    }
}

//=========================================================================================================================

PS
{
    #include "common/pixel.hlsl"

    RenderState( BlendEnable, true );
    RenderState( SrcBlend, SRC_ALPHA );
    RenderState( DstBlend, INV_SRC_ALPHA );
    RenderState( ColorWriteEnable0, RGBA );

    /*RenderState( DepthEnable, true );
    RenderState( DepthWriteEnable, true );
    RenderState( DepthFunc, LESS_EQUAL );
    RenderState( StencilEnable, true );
    RenderState( StencilReadMask, 0xFF );
    RenderState( StencilWriteMask, 0xFF );
    RenderState( StencilRef, 5 );
    RenderState( StencilDepthFailOp, REPLACE );
    RenderState( StencilFailOp, KEEP );
    RenderState( StencilPassOp, ZERO );
    RenderState( StencilFunc, ALWAYS );*/

    PixelOutput MainPs( PixelInput i )
    {
        Material m = GatherMaterial( i );
        PixelOutput o = FinalizePixelMaterial( i, m );
		
		if (o.vColor.a < 1.0)
			discard;
		
		float3 sun = 0;
		sun.xy = 0.2;
		sun.z = 1;
		
		float v = 0.5 * (1 + dot(normalize(sun), i.vNormalWs.xyz));
		o.vColor.rgb *= (v * 0.75 + 0.25);
		
		/*float4x4 thresholdMatrix =
		{
			1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
			13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
			4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
			16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
		};

		float thm = thresholdMatrix[i.vPositionSs.x % 4][i.vPositionSs.y % 4];
		o.vColor.r = o.vColor.r < thm ? 0 : 1;
		o.vColor.g = o.vColor.g < thm ? 0 : 1;
		o.vColor.b = o.vColor.b < thm ? 0 : 1;*/
		
		//o.vColor.rgb = floor(o.vColor.rgb * 15) / 15;
		
		//o.vColor.rgb = (i.vNormalWs.xyz + 1) / 2;
		
        return o;
    }
}